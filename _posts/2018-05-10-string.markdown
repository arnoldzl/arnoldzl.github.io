`this is just a algorithm learning blog for my own purpose of use.`

5类常考问题

- removal
    - remove some particular chars from a string.
    - remove all leading, trailing, duplicated space from a string.
- De-duplication.
    - aaaabb_ccc -> ab_c
- replace empty space with "%20"
- reversal. 
    - "I love yahoo" -> "yahoo love I"
- subString
    - strstr
    - "Robin-Karp" & KMP
    
Advanced Operation:

- Move letters around: ABCD1234 -> A1B2C3D4
- Permutation. (using DFS)
- Decoding/Encoding. (aaaabbc -> a4b2c1)
- Longest substring that only contains unique chars
- Matching(*, ?)

`Popular representation of chars`
`ASCII representation: A->65, a-> 97, 0->48, 9->57`
`Unicode`

## Related Topics

### Char Removal

#### Remove a/some particular chars from a string

String input = "student", remove "u" and "n".

`常见错误·····使用类似array.remove方法`

```java 
for (int i = 0; i < charArray.length; i++) {
    if (arr[i] == "u" || arr[i] == "n") remove i;
    // All the rest elements after i will shift left by one
}
```
Not only because this method is relatively slow(O(n)), but also it is wrong in some cases. 

Suppose we have a String "stuudent", if we want to remove "u", this algorithm will only remove the first "u", the second one will override the space of first "u". After i++, we skip a value.

**Method** Use 挡板法, 两个挡板**同向**而行。Maintain 物理意义:[0,i)是已探索区域，when a new element come, if it's not in the removal set, copy into array[i], i++.

``` java
int i = 0, j = 0;
while (j < char.length) {
    if (char[j] not in removalSet) {
        char[i++]=char[j];
    } else {//do nothing
    }
}
```

#### Remove all leading/trailing/duplicate empty spaces

String input = "\___ab__c_d____" output = "ab_c_d"

**Method** Same as previous problem, the difference are we need to know whether we need to ignore the space.

1. ignore all spaces that its prev index is a space. so we will only have the first space of a consecutive spaces.
2. If the space is the first characters

``` java
if (arr[fast] == ' ' && (fast == 0 || arr[fast - 1] == ' ')) {
    continue;
} 
else {// copy the value to the slow pointer
}
```

After this, we may have "a_b_" situation, need to do a post processing remove the last space.

**Another method** 

``` java
while (true) {
    while (fast < size && arr[fast] == ' ') { // delete trailing spaces
        fast++;
    }
    if (fast == size) {break;} // the end of array
    if (flag) {
        // record the position of space
        arr[slow++] = ' ';
    }
    while (fast < size && arr[fast] != ' ') {
        arr[slow++] = arr[fast++];
    }
}
```
### Substring problems

#### Determine whether a string is a substring of another

**Method 1** Naive solution:

``` java
for (int i = 0; i < large.size - small.size; i++) {
    if (equals(large, i, small)) {return i;} // needs O(n) time
}
```

Suppose large.size = m || small.size = n
This method takes O(n*(m-n)) 

**Method 2** Rabin-Karp

First calculate the small string's hash, compare with each substring of the larger String.
Hash function used is module hash decribed as:
``` java
int largePrime = 101, prime = 31, seed = 1
private int moduleHash(int hash, int addition, int prime, int largePrime) {
    return (hash * prime % largePrime + addition) % largePrime;
}
```
when calculate the larger String's substr hash, delete the first index's hash, add the next index:
``` java
int hash = nonNegative(hash - seed * large.charAt(i - 1) % largePrime, largePrime);
int hash = moduleHash(hash, large.charAt(i + small.size() - 1), prime, largePrime);
```


### Topic with merge sort

#### String combinations: A1B2C3D4 -> ABCD1234

- Use merge sort. The difference is when doing merge process, distinguish 

```java
if ((int)helper[l] <= 57 && (int)helper[l] >= 48) {
    // ASCII 码数字在[48,57]->[0,9]
} 
```

If that's the case, move it to right. else to left.

- Use bit operation. **Note** this method only works when the length of array is 2^n. Suppose the original array is

`0 1 2 3 4 5 6 7` 
`A 1 B 2 C 3 D 4` 

the array we want is 

`A B C D 1 2 3 4`

We can tell that $A$ and $4$ stays same. the mapping of transformation is:

sol[1] = arr[2]; sol[2] = arr[4]; sol[4] = arr[1].
&&
sol[3] = arr[6]; sol[6] = arr[5]; sol[5] = arr[3].

If we change such mapping into bit operation, we can get:

``` java
// get the digits of the bits. which is 3 in this example
int logn = 31 - Integer.numberOfLeadingZeros(size);
// how to transform 1->2, 2->4, 4->1,3->6,...
if (!overflow) i << 1;
else i >> logn - 1;
// we can write this in one line
(i << 1 | i >> logn - 1)&(size-1)
```

- After this, we can simply using sol[i] = arr[helper[i]] to map the result.

### String reversal : Topic with "I love yahoo-> yahoo love I"

#### "apple" -> "elppa"

**Method 1** Iterative way
``` java 
int i = 0, j = arr.length - 1;
while (i < j) {
    swap(arr, i++, j--);
}
```
**Method 2** Recursive way
``` java
private void reverse(char[] arr, int left, int right) {
    if (left >= right) {return;}
    reverse(arr, left + 1, right - 1);
    swap(arr, left, right);
}
```

#### "I love yahoo" -> "yahoo love I"

1. Swap each word first;
2. Swap the whole sentence.

`Remark: needs to handle corner case.[the last index]`

``` java
private void reverse(char[] input) {
    int slow = 0;
    for (int i = 0; i < input.length; i++) {
        if (input[i] == ' ' || i == input.length - 1) {
            // guarantee no leading/trailing/duplicate spaces
            if (i == input.length - 1) {
                reverseHelper(input, slow, i);
            } else {
                reverseHelper(input, slow, i-1);
            }
        }
    }
    reverseHelper(input, 0, input.length - 1);
}
```

#### Shift the whole string to the right hand side by k positions

"abcd | ef" -> "ef | abcd" shift right by 2

Similar with previous question, consider put a spliter in (arr.length - k) % arr.length. Do String reverse.

### String Replace

We need to make sure slow pointer can not move ahead of fast pointer, that leads to two situations:

- Replace Shorter: "den" - "XX"
    - We can use **two pointers from Left to Right**. Once we find a match, copy *target* to *source* position;
- Replace Longer: "_" -> "%20"
    - Need to use **two pointers from right to left**. 
    - First, find all matches String's last index pointer; Store in a List
    - Next, calculate new char arr's length.
    - For each match index in the list, copy *target* to the result char array.
    - fast -= s.length; slow -= t.length. [fast in input array, slow in result array]

**Method 2**

We can also use StringBuilder and String.indexOf() API to do this simply. 
- Once we find a match index using String.indexOf(fromIndex, source) [here]
- while (still can find a match index) : do stringBuilder.append(String between fromIndex and matchIndex).append(target String)

### String Combinations: ABCD1234 -> A1B2C3D4

If we can transfer "ABCD1234" to "AB12CD34", we can simply use recursion to finish the task.

We can following the rules, AB CD 12 34->AB DC 21 34->AB 12 CD 34.

### String Decoding

This method often used in data storage. 

**Run-Length Decoding** :  "a4b1c2b1a5" -> "aaaabccbaaaaa"

Assumptions:
- Do we have more than 10 elements? Yes.
- Do the original String has numbers already? 
    - Could be asked in follow-up. "111122333" -> "1#4, 2#2, 3#3" use ',' as deliminater.
- case 1. can make the original String shorter/unchanged: # of occurance <= 2;
- case 2. can make the orginal String larget: # of occurance > 2.

**In place method** 
- Do decodeShort First, return the new length after decoding.
    - Two pointers from left to right, 
    - if 0 <= arr[i+1] <= 2: copy # of occurence times of arr[i]; 
- Then do decodeLong, 
    - allocate enough space first;
    - Two pointers from right to left;
    - if 2 <= arr[i] <= 9: copy # of occurence times of arr[i-1];

**StringBuilder**

Simply read the input number m then append m times.

### Sliding window in a String

#### Longest Substring that contains only unique character.

Return the length.

"BDEFGADE" the longest substring that has unique chars is "BDEFGA" whose size is 6

1. Create a Set to record all appeared elements. 
2. left and right pointer form a sliding window
    - If set.contains(arr[right]): set.remove(arr[left++])
    - else: set.add(arr[right++]), update new global max if possible.

#### All anagrams of a substring s2 in a long String s1

`An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, the word anagram can be rearranged into "naga ram".`

Eg: s2 = "aabc". s1 = "za**aabca**yywwww**bcaa**". we can find three anagrams: "aabc", "abca", "bcaa"

1. Maintain a countMap alone with the sliding window;
2. when the sliding window meet an element, if its in the countMap, count--; If count reduce from 1 to 0, match++;
3. when the sliding window pop an element, if its in the countMap, count++; if count add from 0 to 1, match--;
4. If match == countMap.size(), we have an anagram.











